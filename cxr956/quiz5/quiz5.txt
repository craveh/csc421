QUIZ 5

Name: Hannah Raveh, 
submission late because of accidental deletion from svn
Grade:

1: 2/2
2: 1/1
3: 2/2
4: 2/2

excel: 4/4

Date out: 31 oct
Date due:  4 nov

This is an exercise in virtual memory. You are to fill out
the page tables for two processes.

We are taking the example of paging in a 16 bit architecture.
It will have 1024 byte pages. 

1. Hence the lower ___ bits of the  address are offsets in
   a page and the upper ____ bits are the page frame number.

   10 lower bits
   6 upper bits 

2. Hence there are ___ pages. 
   64

We round up to one byte PTE's. The layout of the PTE's are:

  
   +---+---+---+---+---+---+---+---+
   | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
   +---+---+---+---+---+---+---+---+
   
   7 = Valid bit. 0 if invalid PTE, 1 if valid
   6 = reserver
   5-0 = 16 bit page frame number
   
3. Since there are 64 pages, each page table is ___ bytes,
   and therefore  ___ page tables fit in one page.
   2^6 = 64 bytes per tables
   16 tables in 1 page

The operating system will occupy the top 1/4 of memory, 
for both its program and data. Since 16 bits is 65,536 
(64k).

4. The size of virtual space dedicated to the operating 
   system is ___ K byes. The virtual address space for 
   each user is ____ K bytes.
   16K bytes for virtual space for operating system
   48K bytles for virtual address space
   
You are to fill out the page tables given the following scenario.
I have already filled out the page table for two processes with
the mapping for the operating system. I have claimed 16 pages
marking them with a 1 in the frame database, and filled out the 
frame number with the valid bit set in each of the page tables
for the two processes.

5. Each process initially gets 4 K of stack, and 4 K of heap; 
   Process A goes first and also gets 12 K of program and 4 K 
   of BSS. Then process B gets 8 K of program and 2 K of BSS.
   
   (To help the grader, assume allocation by the lowest numbered
   free frame first, first allocating text, then BSS, then heap, 
   then stack).:
   
6. During the running of process A and B, first Process A does a 
   sbrk and request 2 more K of Heap. Then Process B needs another 
   2 K of stack. 
   
Show the result in the excel file.


   

   
   

   
   
